{"version":3,"sources":["components/SearchBar/SearchBar.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","components/Loader/Loader.js","components/Modal/Modal.js","services/imageApi.js","App.js","index.js"],"names":["SearchBar","state","inputValue","handleChange","target","setState","value","handleSubmit","e","preventDefault","props","onSubmit","className","this","type","autoComplete","autoFocus","placeholder","onChange","Component","ImageGalleryItem","webformatURL","tags","largeImage","src","alt","onClick","ImageGallery","images","onLargeImage","map","id","largeImageURL","window","scrollTo","top","document","documentElement","scrollHeight","behavior","Button","onButton","Spinner","color","height","width","modalRoot","querySelector","Modal","handleKeyDown","code","onClose","addEventListener","removeEventListener","createPortal","children","baseUrl","fetchImages","searchQuery","page","options","method","headers","Accept","requestParameter","fetch","then","response","json","data","hits","App","loading","error","largeImg","fetchImagesByQuery","catch","finally","handleSearchFormSubmit","query","setLargeImage","url","closeModal","prevProps","prevState","massage","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3cceff39.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../../styles.css';\n\nclass SearchBar extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    inputValue: ' ',\n  };\n\n  handleChange = ({ target }) => {\n    this.setState({ inputValue: target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state.inputValue);\n    this.setState({ inputValue: '' });\n  };\n\n  render() {\n    return (\n      <header className=\"Searchbar\">\n        <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\n          <button type=\"submit\" className=\"SearchFormButton\">\n            <span className=\"SearchFormButtonLabel\">Search</span>\n          </button>\n\n          <input\n            className=\"SearchFormInput\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search images and photos\"\n            value={this.state.inputValue}\n            onChange={this.handleChange}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../../styles.css';\n\nconst ImageGalleryItem = ({ webformatURL, tags, largeImage }) => (\n  <li className=\"ImageGalleryItem\">\n    <img\n      src={webformatURL}\n      alt={tags}\n      className=\"ImageGalleryItemImage\"\n      onClick={largeImage}\n    />\n  </li>\n);\n\nImageGalleryItem.propTypes = {\n  webformatURL: PropTypes.string.isRequired,\n  tags: PropTypes.string.isRequired,\n  largeImage: PropTypes.func.isRequired,\n};\n\nexport default ImageGalleryItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\n\nimport '../../styles.css';\n\nconst ImageGallery = ({ images, onLargeImage }) => (\n  <ul className=\"ImageGallery\">\n    {images.map(({ id, webformatURL, tags, largeImageURL }) => (\n      <ImageGalleryItem\n        key={id}\n        webformatURL={webformatURL}\n        tags={tags}\n        largeImage={() => onLargeImage(largeImageURL)}\n      />\n    ))}\n  </ul>\n);\n\nImageGallery.propTypes = {\n  images: PropTypes.arrayOf(\n    PropTypes.shape({\n      webformatURL: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      tags: PropTypes.string.isRequired,\n      largeImageURL: PropTypes.string.isRequired,\n    }),\n  ),\n  onLargeImage: PropTypes.func.isRequired,\n};\n\nexport default ImageGallery;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../../styles.css';\n\nwindow.scrollTo({\n  top: document.documentElement.scrollHeight,\n  behavior: 'smooth',\n});\n\nconst Button = ({ onButton }) => (\n  <button type=\"button\" className=\"Button\" onClick={onButton}>\n    Load more\n  </button>\n);\n\nButton.propTypes = {\n  onButton: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import React from 'react';\n\nimport '../../styles.css';\n\nimport Loader from 'react-loader-spinner';\n\nconst Spinner = () => (\n  <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={100} width={100} />\n);\n\nexport default Spinner;\n","import React, { Component } from 'react';\n\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nimport '../../styles.css';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default class Modal extends Component {\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  handleKeyDown = e => {\n    if (e.code === 'Escape') {\n      this.props.onClose();\n    }\n  };\n\n  render() {\n    return createPortal(\n      <div className=\"Overlay\">\n        <div className=\"Modal\">{this.props.children}</div>\n      </div>,\n      modalRoot,\n    );\n  }\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","const baseUrl = 'https://pixabay.com/api/';\n\nconst fetchImages = (searchQuery, page = 1) => {\n  const options = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n  };\n  const requestParameter = `?q=${searchQuery}&page=${page}&key=17901819-89869377453f6777a0034661b&image_type=photo&orientation=horizontal&per_page=12`;\n\n  return fetch(baseUrl + requestParameter, { options }).then(response =>\n    response.json().then(data => data.hits),\n  );\n};\n\nexport { fetchImages };\n","import React, { Component } from 'react';\n\nimport SearchBar from './components/SearchBar';\nimport ImageGallery from './components/ImageGallery';\nimport Button from './components/Button';\nimport Spinner from './components/Loader';\nimport Modal from './components/Modal';\n\nimport { fetchImages } from './services/imageApi';\n\nclass App extends Component {\n  state = {\n    images: [],\n    loading: false,\n    error: null,\n    largeImg: null,\n    searchQuery: ' ',\n    page: 1,\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevQuery = prevState.searchQuery;\n    const nextQuery = this.state.searchQuery;\n\n    if (prevQuery !== nextQuery) {\n      this.fetchImagesByQuery();\n    }\n  }\n\n  fetchImagesByQuery = () => {\n    const { searchQuery, page } = this.state;\n\n    this.setState({ loading: true });\n\n    fetchImages(searchQuery, page)\n      .then(images =>\n        this.setState(state => ({\n          images: [...state.images, ...images],\n          page: state.page + 1,\n        })),\n      )\n      .catch(error => this.setState({ error }))\n      .finally(() => this.setState({ loading: false }));\n  };\n\n  handleSearchFormSubmit = query => {\n    this.setState({ searchQuery: query, page: 1, images: [] });\n  };\n\n  setLargeImage = url => {\n    this.setState({ largeImg: url });\n  };\n\n  closeModal = () => {\n    this.setState({ largeImg: null });\n  };\n\n  render() {\n    const { images, loading, error, largeImg } = this.state;\n\n    return (\n      <>\n        <SearchBar onSubmit={this.handleSearchFormSubmit} />\n        {error && <p>Whoops, something went wrong: {error.massage}</p>}\n        {images.length > 0 && (\n          <ImageGallery images={images} onLargeImage={this.setLargeImage} />\n        )}\n        {loading && <Spinner />}\n        {images.length > 0 && !loading && (\n          <Button onButton={this.fetchImagesByQuery} />\n        )}\n        {largeImg && (\n          <Modal onClose={this.closeModal}>\n            <img src={largeImg} alt=\"\" />\n          </Modal>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}